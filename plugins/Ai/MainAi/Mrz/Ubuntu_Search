from pyrogram import Client, filters
import requests
import asyncio
from datetime import datetime
from pytz import timezone

# Safone API endpoint
SAFONE_API_URL = "https://api.safone.dev/ubuntu"
# Animation Sticker ID
STICKER_ID = "CAACAgQAAxkBAAIav2aJXr9WgCsyzWEVNPfs1352ByujAAJuDwAC4eqxUNoxB5joJxGiHgQ"

# Function to handle /ubuntu_search command
@Client.on_message(filters.command("ubuntu"))
async def ubuntu_search(client, message):
    if len(message.command) < 2:
        await message.reply_text("Please provide a search query.")
        return
    
    query = " ".join(message.command[1:])  # Get the search query from the message
    
    # Send animation sticker to show processing
    sticker_message = await message.reply_sticker(STICKER_ID)
    
    try:
        # Make request to Safone API
        response = requests.get(SAFONE_API_URL, params={'query': query})
        response.raise_for_status()  # Raise exception for 4xx/5xx errors
        
        # Simulate delay for animation
        await asyncio.sleep(4)  # Adjust delay time as needed
        
        # Process API response
        result = response.json()
        
        if 'results' in result:
            search_results = result['results']
            reply_text = f"ʜᴇʏ: {message.from_user.mention}\n\n"
            reply_text += f"ϙᴜᴇʀʏ: {query}\n\n"
            reply_text += f"ʀᴇsᴜʟᴛs:\n\n"
            
            for i, item in enumerate(search_results[:20], 1):  # Limit to 20 results
                reply_text += (f"{i}. [{item['title']}]({item['link']})\n"
                               f"{item['description']}\n\n")
            
            # Add current date and time (IST)
            ist = timezone('Asia/Kolkata')
            current_datetime = datetime.now(ist)
            
            reply_text += (f"Date and Time (IST): {current_datetime.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                           f"Provided by @Mrz_bots")
            
            # Edit the sticker message to show the final result
            await sticker_message.delete()  # Delete the sticker message
            await message.reply_text(reply_text, disable_web_page_preview=True)
        
        else:
            await sticker_message.delete()
            await message.reply_text(f"No data found for '{query}'.")
    
    except requests.exceptions.RequestException as e:
        await sticker_message.delete()
        await message.reply_text(f"Error fetching Ubuntu search results: {e}")
