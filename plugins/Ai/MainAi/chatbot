from pymongo import MongoClient
from pyrogram import Client, filters, types, enums
from datetime import datetime
from HorridAPI import Mango
from info import DATABASE_URI, ADMINS

mongodb_uri = DATABASE_URI
client = MongoClient(mongodb_uri)
db = client["chat_database"]
chat_collection = db["chat_data"]

chatbot_states = {}

async def get_response(prompt):
    role_message = (
        "I am Tom, an AI-powered assistant trained to offer thoughtful, personalized responses. "
        "My role is to assist, analyze human emotions, and solve user problems with friendly and informative interactions. "
        "I am proudly maintained by MMW BOTZ. For more details, visit their GitHub repository: "
        "[GitHub](https://github.com/mallu-movie-world-dev1).\n\n"
        "Important details:\n"
        "1. Emotions should be detected and responded to empathetically.\n"
        "2. Key information should be highlighted with **bold text**.\n"
        "3. Names and other identifiers should appear in **quote format**.\n"
    )

    mango = Mango()
    response = mango.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": role_message},
            {"role": "user", "content": prompt}
        ]
    )
    content = response.text
    return content

def save_conversation(user_id, prompt, response):
    chat_collection.update_one(
        {"user_id": user_id},
        {"$push": {"messages": {"prompt": prompt, "response": response, "timestamp": datetime.utcnow()}}},
        upsert=True
    )

@Client.on_message(filters.command("chatbot"))
async def chatbot_settings(bot, message):
    user_id = message.from_user.id
    chat_type = message.chat.type

    if chat_type in [enums.ChatType.GROUP]:
        grp_id = message.chat.id
        st = await bot.get_chat_member(grp_id, user_id)

        if st.status in [enums.ChatMemberStatus.ADMINISTRATOR, enums.ChatMemberStatus.OWNER] or user_id in ADMINS:
            await message.reply_text(
                "⚡ Chat Bot Settings",
                reply_markup=types.InlineKeyboardMarkup([
                    [
                        types.InlineKeyboardButton("Enable", callback_data=f"chatbot:enable:{user_id}"),
                        types.InlineKeyboardButton("Disable", callback_data=f"chatbot:disable:{user_id}")
                    ]
                ])
            )

@Client.on_message(filters.group)
async def chatbot_reply(bot, message):
    chat_id = message.chat.id
    if not chatbot_states.get(chat_id, True):
        return

    if message.reply_to_message.from_user.id == client.me.id:
        prompt = message.text
        await bot.send_chat_action(chat_id, enums.ChatAction.TYPING)
        try:
            response = await get_response(prompt)
            save_conversation(message.from_user.id, prompt, response)
            await message.reply_text(response.text)
        except Exception as e:
            await message.reply_text("Hey there! I'm still under development, but I'm learning to be informative and comprehensive. How can I help you today?")

@Client.on_callback_query(filters.regex("chatbot:enable"))
async def enable_chatbot_callback(bot, callback_query):
    chat_id = callback_query.message.chat.id
    chatbot_states[chat_id] = True
    await callback_query.message.edit_reply_markup(
        reply_markup=types.InlineKeyboardMarkup([[
            types.InlineKeyboardButton("Disable", callback_data=f"chatbot:disable:{callback_query.from_user.id}")
        ]])
    )
    await callback_query.message.reply_text("⚡ Chat Bot enabled.")

@Client.on_callback_query(filters.regex("chatbot:disable"))
async def disable_chatbot_callback(bot, callback_query):
    chat_id = callback_query.message.chat.id
    chatbot_states[chat_id] = False
    await callback_query.message.edit_reply_markup(
        reply_markup=types.InlineKeyboardMarkup([[
            types.InlineKeyboardButton("Enable", callback_data=f"chatbot:enable:{callback_query.from_user.id}")
        ]])
    )
    await callback_query.message.reply_text("⚡ Chat Bot disabled.")
